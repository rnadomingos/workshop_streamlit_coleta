import os
import streamlit as st
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.orm import declarative_base, sessionmaker
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

# Definie o t√≠tulo da pagina e ico
st.set_page_config(page_title="Coleta de Dados", page_icon="üé≤")


# URL do Banco de Dados
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
DB_NAME = os.getenv("DB_NAME")
DATABASE_URL = f"postgresql://{DB_HOST}:{DB_PASS}@{DB_HOST}/{DB_NAME}"

Base = declarative_base()


class SurveyData(Base):
    __tablename__ = "survey_data"
    id = Column(Integer, primary_key=True, autoincrement=True)
    estado = Column(String(50))
    bibliotecas = Column(Text)
    area_atuacao = Column(String(50))
    horas_estudo = Column(String(20))
    conforto_dados = Column(String(50))
    experiencia_python = Column(Integer)
    experiencia_sql = Column(Integer)
    experiencia_cloud = Column(Integer)


def try_connection():
    try:
        engine = create_engine(DATABASE_URL)
        return engine
    except SQLAlchemyError as e:
        st.error(f"Erro ao conectar ao banco de dados: {e}")
        return None


# Fun√ß√£o para criar a tabela caso n√£o exista
def criar_tabela_se_nao_existir(engine):
    try:
        Base.metadata.create_all(engine)
    except SQLAlchemyError as e:
        st.error(f"Erro ao criar a tabela: {e}")


# Fun√ß√£o para salvar dados no banco de dados
def salvar_dados_banco(session, dados):
    try:
        novo_dado = SurveyData(
            estado=dados["Estado"],
            bibliotecas=dados["Bibliotecas e ferramentas"],
            area_atuacao=dados["√Årea de Atua√ß√£o"],
            horas_estudo=dados["Horas de Estudo"],
            conforto_dados=dados["Conforto com Dados"],
            experiencia_python=dados["Experi√™ncia de Python"],
            experiencia_sql=dados["Experi√™ncia de SQL"],
            experiencia_cloud=dados["Experi√™ncia de Cloud"],
        )
        session.add(novo_dado)
        session.commit()
    except SQLAlchemyError as e:
        st.error(f"Erro ao salvar os dados no banco de dados: {e}")
        session.rollback()


# Obter a inst√¢ncia do engine e criar a tabela se necess√°rio
engine = try_connection()

if engine is not None:
    criar_tabela_se_nao_existir(engine)

# Configurar a sess√£o do SQLAlchemy
Session = sessionmaker(bind=engine)


st.title("Coleta de Dados")

# Op√ß√µes de estados
estados = [
    "Acre",
    "Alagoas",
    "Amap√°",
    "Amazonas",
    "Bahia",
    "Cear√°",
    "Distrito Federal",
    "Esp√≠rito Santo",
    "Goi√°s",
    "Maranh√£o",
    "Mato Grosso",
    "Mato Grosso do Sul",
    "Minas Gerais",
    "Par√°",
    "Para√≠ba",
    "Paran√°",
    "Pernambuco",
    "Piau√≠",
    "Rio de Janeiro",
    "Rio Grande do Norte",
    "Rio Grande do Sul",
    "Rond√¥nia",
    "Roraima",
    "Santa Catarina",
    "S√£o Paulo",
    "Sergipe",
    "Tocantins",
]

# Op√ß√µes de √°reas de atua√ß√£o
areas_atuacao = ["Analista de Dados", "Cientista de Dados", "Engenheiro de Dados"]

# Op√ß√µes de bibliotecas
bibliotecas = [
    "Pandas",
    "Pydantic",
    "scikit-learn",
    "Git",
    "Pandera",
    "streamlit",
    "postgres",
    "databricks",
    "AWS",
    "Azure",
    "airflow",
    "dbt",
    "Pyspark",
    "Polars",
    "Kafka",
    "Duckdb",
    "PowerBI",
    "Excel",
    "Tableau",
    "storm",
]

# Op√ß√µes de horas codando
horas_codando = ["Menos de 5", "5-10", "10-20", "Mais de 20"]

# Op√ß√µes de conforto com dados
conforto_dados = ["Desconfort√°vel", "Neutro", "Confort√°vel", "Muito Confort√°vel"]

# Cria√ß√£o do formul√°rio
with st.form("dados_enquete"):
    estado = st.selectbox("Estado", estados, index=None)
    area_atuacao = st.selectbox("√Årea de Atua√ß√£o", areas_atuacao, index=None)
    bibliotecas_selecionadas = st.multiselect(
        "Bibliotecas e ferramentas mais utilizadas", bibliotecas
    )
    horas_codando = st.selectbox(
        "Horas Codando ao longo da semana", horas_codando, index=None
    )
    conforto_dados = st.selectbox(
        "Conforto ao programar e trabalhar com dados", conforto_dados, index=None
    )
    experiencia_python = st.slider("Experi√™ncia de Python", 0, 10)
    experiencia_sql = st.slider("Experi√™ncia de SQL", 0, 10)
    experiencia_cloud = st.slider("Experi√™ncia em Cloud", 0, 10)

    # Bot√£o para submeter o formul√°rio
    submit_button = st.form_submit_button("Enviar")

# Se o bot√£o foi clicado, salvar os dados no DataFrame e no CSV
if submit_button:
    novo_dado = {
        "Estado": estado,
        "Bibliotecas e ferramentas": ", ".join(bibliotecas_selecionadas),
        "√Årea de Atua√ß√£o": area_atuacao,
        "Horas de Estudo": horas_codando,
        "Conforto com Dados": conforto_dados,
        "Experi√™ncia de Python": experiencia_python,
        "Experi√™ncia de SQL": experiencia_sql,
        "Experi√™ncia de Cloud": experiencia_cloud,
    }

    session = Session()
    salvar_dados_banco(session, novo_dado)
    st.success("Dados enviados com sucesso!")
